name: TicketChain CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'

env:
  NODE_VERSION: 16
  PNPM_VERSION: 8.6.0
  SOLIDITY_VERSION: 0.8.20

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Lint
        run: pnpm run lint

      - name: Type check
        run: pnpm run typecheck

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Run integration tests
        run: pnpm run test:integration

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run security audit
        run: pnpm audit

  build:
    name: Build
    needs: [quality, test, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Compile contracts
        run: pnpm run compile --force

      - name: Build TypeScript bindings
        run: pnpm run typechain

      - name: Build frontend
        run: pnpm run build:frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts/
            typechain-types/
            frontend/build/

  deploy:
    name: Deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: [build]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to network
        run: pnpm run deploy:${{ github.ref == 'refs/heads/main' && 'mainnet' || 'testnet' }}
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Verify contract
        run: pnpm run verify
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Create deployment record
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  # Generate documentation and release notes
  docs:
    name: Documentation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Generate API documentation
        run: pnpm run docs:generate

      - name: Update changelog
        uses: conventional-changelog/conventional-changelog-action@v1

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
